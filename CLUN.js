/**
 * ========================================================================================
 * == SCRIPT DE AUTOMA√á√ÉO - Classifica√ß√£o Unica ==
 * ========================================================================================
 *
 * Script de automa√ß√£o baseado em classifica√ß√£o √∫nica.
 * 
 */

// Usamos uma IIFE (Immediately Invoked Function Expression) para encapsular todo o nosso c√≥digo.
// Isso cria um escopo privado e evita que nossas vari√°veis e fun√ß√µes entrem em conflito
// com as vari√°veis e fun√ß√µes do site onde o script est√° rodando.
(function() {
    /**
     * Verifica√ß√£o de seguran√ßa para impedir que o script seja injetado e executado
     * m√∫ltiplas vezes na mesma p√°gina. Se o bot√£o de controle j√° existe,
     * ele assume que o script j√° est√° em execu√ß√£o e para.
     */
    if (document.getElementById('botao-fechar-janelas')) {
        console.log("O script de automa√ß√£o j√° foi injetado nesta p√°gina.");
        return;
    }

    // --- SE√á√ÉO DE GERENCIAMENTO DE JANELAS ---

    /**
     * @type {Window[]}
     * Array global (dentro do escopo do nosso script) que armazena as refer√™ncias (handles)
     * de todas as janelas pop-up abertas. √â a "mem√≥ria" de quais janelas precisam ser gerenciadas.
     */
    const janelasAbertasPeloScript = [];

    /**
     * Itera sobre o array `janelasAbertasPeloScript` e fecha cada janela que ainda
     * estiver aberta. Ao final, limpa o array para recome√ßar a contagem.
     * Esta fun√ß√£o √© o n√∫cleo do gerenciamento de mem√≥ria do script.
     */
    function fecharTodasAsJanelas() {
        console.log(`%cFechando ${janelasAbertasPeloScript.length} janelas...`, 'color: #e67e22; font-weight: bold;');
        let fechadas = 0;
        janelasAbertasPeloScript.forEach(janela => {
            // Verifica se a refer√™ncia da janela √© v√°lida e se a janela n√£o foi fechada manualmente.
            if (janela && !janela.closed) {
                janela.close();
                fechadas++;
            }
        });
        console.log(`%c${fechadas} janelas foram fechadas.`, 'color: #e67e22;');
        // Esvazia o array para a pr√≥xima rodada de aberturas.
        janelasAbertasPeloScript.length = 0;
        atualizarContadorDoBotao(); // Garante que o contador no bot√£o volte a zero.
    }

    /**
     * Cria e injeta um bot√£o flutuante na p√°gina. Este bot√£o serve como um controle
     * manual de emerg√™ncia para o usu√°rio fechar todas as janelas pop-up
     * a qualquer momento.
     */
    function criarBotaoDeFechamento() {
        const botao = document.createElement('button');
        botao.id = 'botao-fechar-janelas';
        botao.innerHTML = '‚ùå Fechar Janelas Abertas (0)';
        // Aplica um conjunto de estilos para tornar o bot√£o vis√≠vel e acess√≠vel.
        Object.assign(botao.style, {
            position: 'fixed', bottom: '20px', right: '20px', zIndex: '10000',
            padding: '12px 20px', backgroundColor: '#dc3545', color: 'white',
            border: 'none', borderRadius: '8px', cursor: 'pointer',
            fontSize: '16px', boxShadow: '0 4px 8px rgba(0,0,0,0.2)'
        });
        // Associa a fun√ß√£o de fechamento ao evento de clique do bot√£o.
        botao.onclick = fecharTodasAsJanelas;
        document.body.appendChild(botao);
    }

    /**
     * Atualiza o texto do bot√£o flutuante para mostrar quantas janelas
     * est√£o atualmente abertas, fornecendo feedback visual em tempo real ao usu√°rio.
     */
    function atualizarContadorDoBotao() {
        const botao = document.getElementById('botao-fechar-janelas');
        if (botao) {
            // Filtra o array para ter certeza que estamos contando apenas janelas que o navegador confirma que ainda est√£o abertas.
            const janelasRealmenteAbertas = janelasAbertasPeloScript.filter(j => j && !j.closed).length;
            botao.innerHTML = `‚ùå Fechar Janelas Abertas (${janelasRealmenteAbertas})`;
        }
    }

    /**
     * Fun√ß√£o ass√≠ncrona para pausar a execu√ß√£o do script at√© que um elemento espec√≠fico
     * apare√ßa na p√°gina. Essencial para lidar com conte√∫do que carrega dinamicamente (AJAX).
     * @param {string} selector - O seletor CSS do elemento esperado.
     * @param {Document|Element} context - Onde procurar pelo elemento (padr√£o: todo o documento).
     * @param {number} timeout - Tempo m√°ximo de espera em milissegundos.
     * @returns {Promise<Element>} Uma promessa que resolve com o elemento encontrado.
     */
    async function waitForElement(selector, context = document, timeout = 10000) {
        return new Promise((resolve, reject) => {
            const startTime = Date.now();
            const interval = setInterval(() => {
                const element = context.querySelector(selector);
                if (element) {
                    clearInterval(interval);
                    resolve(element);
                } else if (Date.now() - startTime > timeout) {
                    clearInterval(interval);
                    reject(new Error(`Tempo esgotado esperando por: ${selector}`));
                }
            }, 500);
        });
    }

    /**
     * Fun√ß√£o principal que orquestra todo o fluxo de automa√ß√£o.
     */
    async function processarTodasAsOrdens() {
        // --- Bloco de Intera√ß√£o com o Usu√°rio ---
        // Define as op√ß√µes de classifica√ß√£o que ser√£o apresentadas.
        const opcoesDeClassificacao = {
            '1': 'Corretiva Planejada', '2': 'Corretiva', '3': 'Melhoria',
            '4': 'Acompanhamento', '5': 'Atendimento'
        };
        // Constr√≥i o texto que ser√° exibido na caixa de di√°logo.
        let textoPrompt = "Por favor, escolha a classifica√ß√£o de O.S. a ser aplicada:\n\n";
        for (const key in opcoesDeClassificacao) {
            textoPrompt += `${key} - ${opcoesDeClassificacao[key]}\n`;
        }
        textoPrompt += "\nDigite o n√∫mero da op√ß√£o desejada:";
        // Exibe o prompt e armazena a resposta do usu√°rio.
        const escolhaUsuario = prompt(textoPrompt);

        // --- Bloco de Valida√ß√£o da Entrada do Usu√°rio ---
        if (escolhaUsuario === null) { // Se o usu√°rio clicou em "Cancelar".
            console.log("‚ùå Opera√ß√£o cancelada pelo usu√°rio.");
            return;
        }
        // Converte o n√∫mero digitado (ex: '1') para o texto correspondente (ex: 'Corretiva Planejada').
        const classificacaoEscolhida = opcoesDeClassificacao[escolhaUsuario.trim()];
        if (!classificacaoEscolhida) { // Se a entrada n√£o corresponde a nenhuma op√ß√£o v√°lida.
            alert(`Op√ß√£o inv√°lida: "${escolhaUsuario}". O script n√£o ser√° executado.`);
            console.error(`‚ùå Op√ß√£o inv√°lida: "${escolhaUsuario}".`);
            return;
        }

        console.log(`üöÄ INICIANDO AUTOMA√á√ÉO COM A CLASSIFICA√á√ÉO: "${classificacaoEscolhida}" üöÄ`);
        criarBotaoDeFechamento();

        // Verifica√ß√£o de seguran√ßa para garantir que a p√°gina possui as bibliotecas necess√°rias.
        if (typeof $ === 'undefined' || typeof $.fn.modal === 'undefined') {
            console.error("ERRO CR√çTICO: jQuery ou Bootstrap Modal n√£o encontrados.");
            return;
        }

        // Cria um "Set" para guardar os IDs das O.S. j√° processadas e evitar retrabalho.
        const osProcessadasNestaSessao = new Set();

        // Loop principal: continuar√° rodando enquanto houver O.S. para processar.
        while (true) {
            // Encontra a primeira O.S. que satisfaz duas condi√ß√µes:
            // 1. N√£o cont√©m o texto "Classifica√ß√£o de O.S.".
            // 2. Seu ID ainda n√£o foi adicionado √† nossa mem√≥ria de sess√£o.
            const ordemParaProcessar = Array.from(document.querySelectorAll('#solicitacoesPendentes .list-group-item.media')).find(ordem => {
                const idInput = ordem.querySelector('input.selecionado[id]');
                if (!idInput) return false;
                const idDaOS = idInput.id;
                return !ordem.innerText.includes("Classifica√ß√£o de O.S.") && !osProcessadasNestaSessao.has(idDaOS);
            });

            // Se nenhuma O.S. for encontrada, o trabalho terminou.
            if (!ordemParaProcessar) {
                console.log("%cüéâ Trabalho conclu√≠do! Limpando janelas finais...", "color: green; font-size: 16px; font-weight: bold;");
                fecharTodasAsJanelas();
                break; // Encerra o loop 'while'.
            }

            const idDaOS = ordemParaProcessar.querySelector('input.selecionado[id]').id;
            console.log(`%c[PROCESSANDO] O.S. ID: ${idDaOS}`, "color: orange; font-weight: bold;");

            // O bloco try...catch garante que, se ocorrer um erro em uma O.S., o script para de forma segura.
            try {
                // Simula os cliques para abrir o formul√°rio modal.
                ordemParaProcessar.querySelector('a[data-toggle="dropdown"]').click();
                await new Promise(resolve => setTimeout(resolve, 200));
                ordemParaProcessar.querySelector(`a[id="aceitar|${idDaOS}"]`).click();

                // Espera pelo formul√°rio carregar e o manipula.
                const form = await waitForElement('form[action*="aceitarSolicitacao"]');
                const windowName = 'os_submission_' + idDaOS;
                const windowFeatures = 'width=360,height=270,scrollbars=yes,resizable=yes';
                const novaJanela = window.open('', windowName, windowFeatures);
                if (novaJanela) novaJanela.blur(); // Truque para abrir a janela sem roubar o foco.
                janelasAbertasPeloScript.push(novaJanela);
                atualizarContadorDoBotao();
                form.target = windowName; // Direciona o resultado do form para a nova janela.

                const select = await waitForElement("select[name^='preenchimentoPadrao_']", form);
                select.value = classificacaoEscolhida; // Usa a classifica√ß√£o escolhida pelo usu√°rio.
                select.dispatchEvent(new Event('change', { bubbles: true }));
                console.log(`   - Classifica√ß√£o selecionada: "${classificacaoEscolhida}"`);

                const btnSalvar = Array.from(form.querySelectorAll('button')).find(btn => btn.innerText.trim() === 'Salvar');
                btnSalvar.onclick = () => true; // Pula a caixa de confirma√ß√£o.
                btnSalvar.click();
                await new Promise(resolve => setTimeout(resolve, 2000)); // Pausa para o envio ser processado.

                // Fecha o modal usando o m√©todo mais confi√°vel (API do Bootstrap).
                $('.modal.in').modal('hide');

                osProcessadasNestaSessao.add(idDaOS);
                console.log(`   - O.S. ${idDaOS} adicionada √† mem√≥ria da sess√£o.`);
                console.log('   - Aguardando 2.5 segundos para estabiliza√ß√£o...');
                await new Promise(resolve => setTimeout(resolve, 2500));

                // Verifica se o limite de janelas foi atingido para limpeza autom√°tica.
                if (janelasAbertasPeloScript.length >= 5) {
                    fecharTodasAsJanelas();
                    console.log('   - Pausa adicional de 2 segundos ap√≥s a limpeza das janelas.');
                    await new Promise(resolve => setTimeout(resolve, 2000));
                }

            } catch (error) {
                // Em caso de erro, interrompe o script e tenta fechar as janelas abertas.
                console.error(`ERRO no processamento da OS ${idDaOS}:`, error);
                console.log("A automa√ß√£o ser√° interrompida por seguran√ßa. Fechando todas as janelas...");
                fecharTodasAsJanelas();
                break;
            }

            console.log(`%c[SUCESSO] OS ${idDaOS} processada. Procurando a pr√≥xima...`, "color: lightblue;");
        }
    }

    // Chama a fun√ß√£o principal para iniciar todo o processo.
    processarTodasAsOrdens();

})();

