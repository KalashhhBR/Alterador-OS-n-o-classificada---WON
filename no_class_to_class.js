/**
 * =====================================================================================
 * == SCRIPT DE AUTOMA√á√ÉO DE CLASSIFICA√á√ÉO DE O.S. (VERS√ÉO FINAL DOCUMENTADA) ==
 * =====================================================================================
 *
 * Este script automatiza o processo de classifica√ß√£o de Ordens de Servi√ßo (O.S.)
 * em uma p√°gina web. Ele identifica O.S. n√£o classificadas, abre um formul√°rio
 * de edi√ß√£o, preenche com dados, salva (abrindo o resultado em uma nova janela
 * para n√£o interromper o fluxo), e gerencia as janelas abertas para n√£o sobrecarregar
 * o sistema.
 *
 */


// --- SE√á√ÉO DE GERENCIAMENTO DE JANELAS ---

/**
 * @type {Window[]}
 * Array global que armazena as refer√™ncias (handles) de todas as janelas
 * pop-up abertas pelo script. √â a "mem√≥ria" de quais janelas precisam ser gerenciadas.
 */
const janelasAbertasPeloScript = [];

/**
 * Itera sobre o array `janelasAbertasPeloScript` e fecha cada janela que ainda
 * estiver aberta. Ao final, limpa o array para recome√ßar a contagem.
 * Esta fun√ß√£o √© o n√∫cleo do gerenciamento de mem√≥ria.
 */
function fecharTodasAsJanelas() {
    console.log(`%cFechando ${janelasAbertasPeloScript.length} janelas...`, 'color: #e67e22; font-weight: bold;');
    let fechadas = 0;
    janelasAbertasPeloScript.forEach(janela => {
        // Verifica se a refer√™ncia da janela √© v√°lida e se a janela n√£o foi fechada manualmente.
        if (janela && !janela.closed) {
            janela.close();
            fechadas++;
        }
    });
    console.log(`%c${fechadas} janelas foram fechadas.`, 'color: #e67e22;');
    // Esvazia o array para a pr√≥xima rodada de aberturas.
    janelasAbertasPeloScript.length = 0;
}

/**
 * Cria e injeta um bot√£o flutuante na p√°gina. Este bot√£o serve como um controle
 * manual de emerg√™ncia para o usu√°rio fechar todas as janelas pop-up
 * a qualquer momento. Ele s√≥ √© criado uma vez.
 */
function criarBotaoDeFechamento() {
    // Se o bot√£o j√° existe, n√£o faz nada.
    if (document.getElementById('botao-fechar-janelas')) return;

    const botao = document.createElement('button');
    botao.id = 'botao-fechar-janelas';
    botao.innerHTML = '‚ùå Fechar Janelas Abertas (0)';
    // Estiliza o bot√£o para ficar vis√≠vel e acess√≠vel.
    Object.assign(botao.style, {
        position: 'fixed',
        bottom: '20px',
        right: '20px',
        zIndex: '10000',
        padding: '12px 20px',
        backgroundColor: '#dc3545',
        color: 'white',
        border: 'none',
        borderRadius: '8px',
        cursor: 'pointer',
        fontSize: '16px',
        boxShadow: '0 4px 8px rgba(0,0,0,0.2)'
    });
    // Associa a fun√ß√£o de fechamento ao clique do bot√£o.
    botao.onclick = fecharTodasAsJanelas;
    document.body.appendChild(botao);
}

/**
 * Atualiza o texto do bot√£o flutuante para mostrar quantas janelas
 * est√£o atualmente abertas, fornecendo feedback visual ao usu√°rio.
 */
function atualizarContadorDoBotao() {
    const botao = document.getElementById('botao-fechar-janelas');
    if (botao) {
        // Filtra o array para contar apenas as janelas que o navegador confirma que ainda est√£o abertas.
        const janelasRealmenteAbertas = janelasAbertasPeloScript.filter(j => j && !j.closed).length;
        botao.innerHTML = `‚ùå Fechar Janelas Abertas (${janelasRealmenteAbertas})`;
    }
}

// --- SE√á√ÉO DE FUN√á√ïES AUXILIARES ---

/**
 * Fun√ß√£o ass√≠ncrona crucial para lidar com conte√∫do din√¢mico.
 * Ela pausa a execu√ß√£o do script e fica verificando a cada 500ms se um
 * elemento (definido pelo `selector`) j√° apareceu na p√°gina.
 * Resolve a promessa quando o elemento √© encontrado ou rejeita se o tempo (`timeout`) esgotar.
 * @param {string} selector - O seletor CSS do elemento que estamos esperando.
 * @param {Document|Element} context - Onde procurar pelo elemento (padr√£o: todo o documento).
 * @param {number} timeout - Tempo m√°ximo de espera em milissegundos.
 * @returns {Promise<Element>} O elemento encontrado.
 */
async function waitForElement(selector, context = document, timeout = 10000) {
    return new Promise((resolve, reject) => {
        const startTime = Date.now();
        const interval = setInterval(() => {
            const element = context.querySelector(selector);
            if (element) {
                clearInterval(interval);
                resolve(element);
            } else if (Date.now() - startTime > timeout) {
                clearInterval(interval);
                reject(new Error(`Tempo esgotado: ${selector}`));
            }
        }, 500);
    });
}

// --- SE√á√ÉO PRINCIPAL DE EXECU√á√ÉO ---

/**
 * Fun√ß√£o principal que orquestra todo o fluxo de automa√ß√£o.
 */
async function processarTodasAsOrdens() {
    console.log("üöÄ INICIANDO AUTOMA√á√ÉO (VERS√ÉO FINAL - FOCO PASSIVO) üöÄ");
    criarBotaoDeFechamento();

    // Verifica√ß√£o de seguran√ßa para garantir que a p√°gina possui as bibliotecas necess√°rias.
    if (typeof $ === 'undefined' || typeof $.fn.modal === 'undefined') {
        console.error("ERRO CR√çTICO: jQuery ou Bootstrap Modal n√£o encontrados.");
        return;
    }

    // Cria um "Set", uma estrutura de dados otimizada para armazenar valores √∫nicos.
    // Usamos para guardar os IDs das O.S. j√° processadas nesta sess√£o e evitar retrabalho.
    const osProcessadasNestaSessao = new Set();

    // Loop principal. Ele continuar√° rodando enquanto houver O.S. para processar.
    while (true) {
        // Encontra a primeira O.S. na lista que satisfaz duas condi√ß√µes:
        // 1. N√£o cont√©m o texto "Classifica√ß√£o de O.S.".
        // 2. Seu ID ainda n√£o foi adicionado √† nossa mem√≥ria de sess√£o.
        const ordemParaProcessar = Array.from(document.querySelectorAll('#solicitacoesPendentes .list-group-item.media')).find(ordem => {
            const idInput = ordem.querySelector('input.selecionado[id]');
            if (!idInput) return false;
            const idDaOS = idInput.id;
            return !ordem.innerText.includes("Classifica√ß√£o de O.S.") && !osProcessadasNestaSessao.has(idDaOS);
        });

        // Se nenhuma O.S. for encontrada, o trabalho terminou.
        if (!ordemParaProcessar) {
            console.log("%cüéâ Trabalho conclu√≠do! Limpando janelas finais...", "color: green; font-size: 16px; font-weight: bold;");
            fecharTodasAsJanelas();
            atualizarContadorDoBotao();
            break; // Encerra o loop 'while'.
        }

        const idDaOS = ordemParaProcessar.querySelector('input.selecionado[id]').id;
        console.log(`%c[PROCESSANDO] O.S. ID: ${idDaOS}`, "color: orange; font-weight: bold;");

        try {
            // --- Bloco de A√ß√µes na P√°gina Principal ---
            // Simula os cliques para abrir o menu de op√ß√µes e, em seguida, o formul√°rio modal.
            ordemParaProcessar.querySelector('a[data-toggle="dropdown"]').click();
            await new Promise(resolve => setTimeout(resolve, 200)); // Pausa para o menu aparecer.
            ordemParaProcessar.querySelector(`a[id="aceitar|${idDaOS}"]`).click();

            // --- Bloco de A√ß√µes no Formul√°rio (Modal) ---
            const form = await waitForElement('form[action*="aceitarSolicitacao"]');
            
            // Prepara a abertura da nova janela.
            const windowName = 'os_submission_' + idDaOS;
            const windowFeatures = 'width=800,height=600,scrollbars=yes,resizable=yes';
            
            // Abre a nova janela e guarda sua refer√™ncia.
            const novaJanela = window.open('', windowName, windowFeatures);
            
            // Truque para abrir a janela em segundo plano, sem "roubar" o foco do usu√°rio.
            if (novaJanela) {
                novaJanela.blur();
            }
            
            // Adiciona a refer√™ncia da janela ao nosso gerenciador.
            janelasAbertasPeloScript.push(novaJanela);
            atualizarContadorDoBotao();
            
            // Direciona o resultado do formul√°rio para a nova janela criada.
            form.target = windowName;

            // Preenche os campos do formul√°rio.
            const select = await waitForElement("select[name^='preenchimentoPadrao_']", form);
            select.value = "Corretiva Planejada"; // O valor a ser inserido.
            select.dispatchEvent(new Event('change', { bubbles: true })); // Dispara o evento para o site reconhecer a mudan√ßa.
            
            const btnSalvar = Array.from(form.querySelectorAll('button')).find(btn => btn.innerText.trim() === 'Salvar');
            btnSalvar.onclick = () => true; // Sobrescreve o clique para pular a caixa de confirma√ß√£o.
            btnSalvar.click();
            await new Promise(resolve => setTimeout(resolve, 2000)); // Pausa para o envio ser processado.

            // Usa a API do Bootstrap para fechar o modal, o m√©todo mais confi√°vel.
            $('.modal.in').modal('hide');
            
            // --- Bloco de Finaliza√ß√£o e Limpeza ---
            // Adiciona o ID √† mem√≥ria para n√£o repetir esta O.S.
            osProcessadasNestaSessao.add(idDaOS);
            console.log(`   - O.S. ${idDaOS} adicionada √† mem√≥ria da sess√£o.`);
            
            // Pausa para a p√°gina se estabilizar antes de procurar o pr√≥ximo item.
            console.log('   - Aguardando 2 segundos para estabiliza√ß√£o...');
            await new Promise(resolve => setTimeout(resolve, 2000));

            // Verifica se atingiu o limite de janelas abertas para fazer a limpeza autom√°tica.
            if (janelasAbertasPeloScript.length >= 5) {
                fecharTodasAsJanelas();
                atualizarContadorDoBotao();
                console.log('   - Pausa adicional de 1,5 segundos ap√≥s a limpeza das janelas.');
                await new Promise(resolve => setTimeout(resolve, 1500));
            }

        } catch (error) {
            // Em caso de qualquer erro, interrompe o script e tenta fechar as janelas abertas.
            console.error(`ERRO no processamento da OS ${idDaOS}:`, error);
            console.log("A automa√ß√£o ser√° interrompida por seguran√ßa. Fechando todas as janelas...");
            fecharTodasAsJanelas();
            break; // Encerra o loop 'while'.
        }

        console.log(`%c[SUCESSO] OS ${idDaOS} processada. Procurando a pr√≥xima...`, "color: lightblue;");
    }
}

// Inicia todo o processo.
processarTodasAsOrdens();
